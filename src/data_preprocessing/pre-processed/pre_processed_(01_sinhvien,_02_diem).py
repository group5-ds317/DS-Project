# -*- coding: utf-8 -*-
"""Pre-processed (01_sinhvien, 02_diem).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hSMTPyaN5Z_yxjE62mo6Mui68M5ZBkNN
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import re
from fuzzywuzzy import fuzz, process
import math

sv_df = pd.read_excel("../../Dataset/UIT/01.sinhvien.xlsx")
diem_df = pd.read_excel("../../Dataset/UIT/02.diem.xlsx")

"""## 01.sinhvien"""

# Xác định các cột dữ liệu và đồng thời loại bỏ các cột trống
sv_columns = sv_df.columns
sv_columns = ['id', 'mssv', ' namsinh', ' gioitinh', ' noisinh', ' lopsh', ' khoa', ' hedt', ' khoahoc', ' chuyennganh2', ' tinhtrang', ' diachi_tinhtp']
sv_df = sv_df[sv_columns]
sv_df.head()

# Xác định kiểu dữ liệu
sv_df.dtypes

# Tìm kiếm và xóa bỏ các dòng giá trị trống
print(sv_df.isnull().sum())
sv_df = sv_df.dropna(how='all')
print(sv_df.isnull().sum())

# Xác định các trường dữ liệu liên tục và rời rạc
sv_continuous_feature = [' namsinh']
sv_categorical_feature = [' gioitinh', ' noisinh', ' lopsh', ' khoa', ' hedt', ' khoahoc', ' chuyennganh2', ' tinhtrang', ' diachi_tinhtp']

# Điền dữ liệu thiếu bằng giá trị trung bình
sv_df[sv_continuous_feature] = sv_df[sv_continuous_feature].fillna(sv_df[sv_continuous_feature].mean())

# Thống kê mô tả cơ bản các cột dữ liệu liên tục
sv_df[sv_continuous_feature].describe().round(2)

# Trực quan hóa phân bố dữ liệu của các cột dữ liệu liên tục
plt.figure(figsize=(20,5))
plt.subplot(1,2,1)
sns.histplot(sv_df[sv_continuous_feature], kde=True, discrete=True)
plt.subplot(1,2,2)
sns.boxplot(sv_df[sv_continuous_feature])
plt.tight_layout()
plt.show()

# Chuyển các dữ liệu rời rạc về kiểu chuỗi
for col in sv_categorical_feature:
    sv_df[col] = sv_df[col].apply(lambda x: str(x))

# Xóa các ký tự đặc biệt của các dữ liệu rời rạc
pattern = r'[!\"#\$%&\'\(\)\*\+,\-\./:;<=>\?@\[\\\]\^_`\{\|\}~]'
for col in [' noisinh', ' lopsh', ' khoa', ' hedt', ' chuyennganh2', ' diachi_tinhtp']:
    sv_df[col] = sv_df[col].apply(lambda x: re.sub(pattern, '', x))

sv_df

# Xác định các giá trị đặc trưng của dữ liệu rời rạc
# Đồng thời xác định các cột dữ liệu rời rạc đang chứa dữ liệu nhiễu
sv_df[sv_categorical_feature].apply(lambda x: len(x.unique()))

# Xử lý dữ liệu rời rạc nhiễu ở 2 cột noisinh và diachi_tinhtp bằng cách chuẩn hóa dữ liệu và đưa dữ liệu về các giá trị chuẩn bằng kỹ thuật khớp mờ
sv_noisinh_clean = sv_df[' noisinh'].apply(lambda x: x.lower().strip()).apply(lambda x: re.sub(r'[^\w\s]', '', x))
sv_noisinh_clean

standard_province = [
    "an giang",
    "bà rịa - vũng tàu",
    "bắc giang",
    "bắc kạn",
    "bạc liêu",
    "bắc ninh",
    "bến tre",
    "bình định",
    "bình dương",
    "bình phước",
    "bình thuận",
    "cà mau",
    "cần thơ",
    "cao bằng",
    "đà nẵng",
    "đắk lắk",
    "đắk nông",
    "điện biên",
    "đồng nai",
    "đồng tháp",
    "gia lai",
    "hà giang",
    "hà nam",
    "hà nội",
    "hà tĩnh",
    "hải dương",
    "hải phòng",
    "hậu giang",
    "hòa bình",
    "hưng yên",
    "khánh hòa",
    "kiên giang",
    "kon tum",
    "lai châu",
    "lâm đồng",
    "lào cai",
    "long an",
    "nam định",
    "nghệ an",
    "ninh bình",
    "ninh thuận",
    "phú thọ",
    "phú yên",
    "quảng bình",
    "quảng nam",
    "quảng ngãi",
    "quảng ninh",
    "quảng trị",
    "sóc trăng",
    "sơn la",
    "tây ninh",
    "thái bình",
    "thái nguyên",
    "thanh hóa",
    "thừa thiên huế",
    "tiền giang",
    "thành phố hồ chí minh",
    "trà vinh",
    "tuyên quang",
    "vĩnh long",
    "vĩnh phúc",
    "yên bái",
    "bắc liêu"
]

sv_noising_fuzzy_matching = sv_df[' noisinh'].apply(lambda x: process.extractOne(x, standard_province)).apply(lambda x: x[0])

sv_df[' noisinh'] = sv_noising_fuzzy_matching

sv_diachi_clean = sv_df[' diachi_tinhtp'].apply(lambda x: x.lower().strip()).apply(lambda x: re.sub(r'[^\w\s]', '', x))
sv_diachi_clean

sv_diachi_fuzzy_matching = sv_df[' diachi_tinhtp'].apply(lambda x: process.extractOne(x, standard_province)).apply(lambda x: x[0])

sv_df[' diachi_tinhtp'] = sv_diachi_fuzzy_matching

province_to_region = {
    "an giang": "Mekong Delta",
    "bà rịa - vũng tàu": "Ho Chi Minh - East",
    "bắc giang": "North",
    "bắc kạn": "North",
    "bạc liêu": "Mekong Delta",
    "bắc ninh": "North",
    "bến tre": "Mekong Delta",
    "bình định": "Central",
    "bình dương": "Ho Chi Minh - East",
    "bình phước": "Ho Chi Minh - East",
    "bình thuận": "Ho Chi Minh - East",
    "cà mau": "Mekong Delta",
    "cần thơ": "Mekong Delta",
    "cao bằng": "North",
    "đà nẵng": "Central",
    "đắk lắk": "Central",
    "đắk nông": "Central",
    "điện biên": "North",
    "đồng nai": "Ho Chi Minh - East",
    "đồng tháp": "Mekong Delta",
    "gia lai": "Central",
    "hà giang": "North",
    "hà nam": "North",
    "hà nội": "North",
    "hà tĩnh": "Central",
    "hải dương": "North",
    "hải phòng": "North",
    "hậu giang": "Mekong Delta",
    "hòa bình": "North",
    "hưng yên": "North",
    "khánh hòa": "Central",
    "kiên giang": "Mekong Delta",
    "kon tum": "Central",
    "lai châu": "North",
    "lâm đồng": "Central",
    "lào cai": "North",
    "long an": "Mekong Delta",
    "nam định": "North",
    "nghệ an": "Central",
    "ninh bình": "North",
    "ninh thuận": "Central",
    "phú thọ": "North",
    "phú yên": "Central",
    "quảng bình": "Central",
    "quảng nam": "Central",
    "quảng ngãi": "Central",
    "quảng ninh": "North",
    "quảng trị": "Central",
    "sóc trăng": "Mekong Delta",
    "sơn la": "North",
    "tây ninh": "Ho Chi Minh - East",
    "thái bình": "North",
    "thái nguyên": "North",
    "thanh hóa": "Central",
    "thừa thiên huế": "Central",
    "tiền giang": "Mekong Delta",
    "thành phố hồ chí minh": "Ho Chi Minh - East",
    "trà vinh": "Mekong Delta",
    "tuyên quang": "North",
    "vĩnh long": "Mekong Delta",
    "vĩnh phúc": "North",
    "yên bái": "North",
    "bắc liêu": "Mekong Delta"
}

# Chuyển dữ liệu nơi sinh và địa chỉ về 4 vùng địa lý chỉnh của Việt Nam: North, Central, Ho Chi Minh - East, Mekong Delta
sv_df['noisinh_vung'] = sv_df[' noisinh'].apply(lambda x: province_to_region[x])
sv_df['diachi_vung'] = sv_df[' diachi_tinhtp'].apply(lambda x: province_to_region[x])

sv_df[' diachi_tinhtp'] = sv_df[' diachi_tinhtp'].apply(lambda x: x.title())
sv_df[' noisinh'] = sv_df[' noisinh'].apply(lambda x: x.title())

# Chuyển dữ liệu ở cột lopsh thành cột nganhhoc khi chỉ lấy thông tin ngành học bằng cách xóa các ký tự số
sv_df['nganhhoc'] = sv_df[' lopsh'].apply(lambda x: re.sub(r'[^a-zA-Z]', '', x))

# Thống kê mô tả cơ bản dữ liệu rời rạc
sv_df[sv_categorical_feature].describe()

sv_categorical_feature.extend(['noisinh_vung', 'diachi_vung', 'nganhhoc'])
sv_categorical_plot_feature = sv_categorical_feature.copy()
sv_categorical_plot_feature.remove(' noisinh')
sv_categorical_plot_feature.remove(' diachi_tinhtp')
sv_categorical_plot_feature.remove(' lopsh')

# Trực quan hóa tần suất các giá trị đặc trưng dữ liệu rời rạc
col = 3
row = int(math.ceil(len(sv_categorical_plot_feature) / col))
plt.figure(figsize=(20,20))
plt.subplots_adjust(wspace=0.5, hspace=0.2)
for index, df_col in enumerate(sv_categorical_plot_feature):
    plt.subplot(row, col, index + 1)
    sns.countplot(sv_df[df_col])
plt.show()

# Xuất dữ liệu sau khi xử lý
sv_df.to_excel("processed_01_sinhvien.xlsx")

"""## 02.diem"""

diem_columns = diem_df.columns
diem_df.head()

diem_columns

# Xác định kiểu dữ liệu
diem_df.dtypes

# Tìm kiếm và xóa bỏ các dòng giá trị trống
print(diem_df.isnull().sum())
diem_df = diem_df.dropna(how='all')
print(diem_df.isnull().sum())

# Xác định các trường dữ liệu liên tục và rời rạc
diem_continuous_feature = [' sotc', ' diem']
diem_categorical_feature = [' mamh', ' malop', ' namhoc', ' hocky', ' trangthai', ' mamh_tt']

# Điền dữ liệu thiếu bằng giá trị trung bình
diem_df[diem_continuous_feature] = diem_df[diem_continuous_feature].fillna(diem_df[diem_continuous_feature].mean())

# Thống kê mô tả cơ bản các cột dữ liệu liên tục
diem_df[diem_continuous_feature].describe().round(2)

# Trực quan hóa phân bố dữ liệu của các cột dữ liệu liên tục
plt.figure(figsize=(20,5))
plt.subplot(1,2,1)
sns.histplot(diem_df[diem_continuous_feature], kde=True, discrete=True)
plt.subplot(1,2,2)
sns.boxplot(diem_df[diem_continuous_feature])
plt.tight_layout()
plt.show()

# Chuyển các dữ liệu rời rạc về kiểu chuỗi
for col in diem_categorical_feature:
    diem_df[col] = diem_df[col].apply(lambda x: int(x) if type(x) == 'float' else str(x))

# Xóa các ký tự đặc biệt của các dữ liệu rời rạc
pattern = r'[!\"#\$%&\'\(\)\*\+,\-\./:;<=>\?@\[\\\]\^_`\{\|\}~]'
for col in [' mamh', ' malop', ' mamh_tt']:
    diem_df[col] = diem_df[col].apply(lambda x: re.sub(pattern, '', x))

# Xác định các giá trị đặc trưng của dữ liệu rời rạc
# Đồng thời xác định các cột dữ liệu rời rạc đang chứa dữ liệu nhiễu
diem_df[diem_categorical_feature].apply(lambda x: len(x.unique()))

# Thống kê mô tả cơ bản dữ liệu rời rạc
diem_df[diem_categorical_feature].describe()

diem_categorical_plot_feature = diem_categorical_feature.copy()
diem_categorical_plot_feature.remove(' mamh')
diem_categorical_plot_feature.remove(' malop')

# Trực quan hóa tần suất các giá trị đặc trưng dữ liệu rời rạc
col = 2
row = int(math.ceil(len(diem_categorical_plot_feature) / col))
plt.figure(figsize=(15,10))
plt.subplots_adjust(wspace=0.2, hspace=0.2)
for index, df_col in enumerate(diem_categorical_plot_feature):
    plt.subplot(row, col, index + 1)
    sns.countplot(diem_df[df_col])
plt.show()

# Xuất dữ liệu sau khi xử lý
diem_df.to_excel("processed_02_diem.xlsx")